(self.webpackChunkmoostache_info=self.webpackChunkmoostache_info||[]).push([[169],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return h}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||a;return n?o.createElement(m,i(i({ref:t},u),{},{components:n})):o.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1504:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var o=n(2122),r=n(9756),a=(n(7294),n(3905)),i=["components"],l={title:'Some "CI" fixes',author:"moostache",author_title:"wishes he had a stache...",author_url:"https://moostache.io",tags:["smatterings"]},s=void 0,c={permalink:"/moostache.io/posts/2020/05/31/cicd",editUrl:"https://github.com/mrbradleylee/moostache.io/blog/2020-05-31-cicd.md",source:"@site/blog/2020-05-31-cicd.md",title:'Some "CI" fixes',description:"Today we implemented some changes to our deployment. Since everything is developed and hosted locally here, the Drone implementation was pretty heavy and overkill for what we're doing. It was an awesome learning experience, but was also a lot of overhead and management. For a while, I just built locally and deployed through SFTP before that, basically making GitHub just a repo. It was all well and good from a Wordpress perspective (maybe we'll go back to a CMS later...), but on static pages, I wanted to be able to deploy changes faster. I work a lot with this at an enterprise scale for a living, but implementing at this tiny scale has been super interesting as well. Can't say I've fully figured it out yet, but I offloaded the build process to the rPi to see how it would handle it, and while it takes a bit longer, having it be hands off is also pretty nice. Notice I put \"CI\" in quotes, cause the deployment now requires me to ssh to the server and execute a script. I haven't been too successful finding a lightweight solution, but I might look into some task runners in Node later. For now, we pull/build/rsync and it seems to be working well!",date:"2020-05-31T00:00:00.000Z",formattedDate:"May 31, 2020",tags:[{label:"smatterings",permalink:"/moostache.io/posts/tags/smatterings"}],readingTime:1.05,truncated:!1,prevItem:{title:"What's New In June",permalink:"/moostache.io/posts/2020/06/01/acnh-june"},nextItem:{title:"Oh look, updates",permalink:"/moostache.io/posts/2020/05/28/projects"}},u=[],p={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Today we implemented some changes to our deployment. Since everything is developed and hosted locally here, the Drone implementation was pretty heavy and overkill for what we're doing. It was an awesome learning experience, but was also a lot of overhead and management. For a while, I just built locally and deployed through SFTP before that, basically making GitHub just a repo. It was all well and good from a Wordpress perspective (maybe we'll go back to a CMS later...), but on static pages, I wanted to be able to deploy changes faster. I work a lot with this at an enterprise scale for a living, but implementing at this tiny scale has been super interesting as well. Can't say I've fully figured it out yet, but I offloaded the build process to the rPi to see how it would handle it, and while it takes a bit longer, having it be hands off is also pretty nice. Notice I put \"CI\" in quotes, cause the deployment now requires me to ssh to the server and execute a script. I haven't been too successful finding a lightweight solution, but I might look into some task runners in Node later. For now, we pull/build/rsync and it seems to be working well!"))}d.isMDXComponent=!0}}]);