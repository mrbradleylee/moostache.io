"use strict";(self.webpackChunkmoostache_info=self.webpackChunkmoostache_info||[]).push([[133],{3905:function(e,r,n){n.d(r,{Zo:function(){return u},kt:function(){return f}});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=t.createContext({}),c=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},u=function(e){var r=c(e.components);return t.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),f=a,g=d["".concat(s,".").concat(f)]||d[f]||p[f]||o;return n?t.createElement(g,i(i({ref:r},u),{},{components:n})):t.createElement(g,i({ref:r},u))}));function f(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1918:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var t=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"js",title:"Javascript Exercise Reference",sidebar_label:"Javascript"},s=void 0,c={unversionedId:"dev/js",id:"dev/js",title:"Javascript Exercise Reference",description:"_Documentation of completed exercises from FCC. Kept as a reference for basics._",source:"@site/docs/dev/js.md",sourceDirName:"dev",slug:"/dev/js",permalink:"/moostache.io/docs/dev/js",editUrl:"https://github.com/mrbradleylee/moostache.io/docs/dev/js.md",tags:[],version:"current",frontMatter:{id:"js",title:"Javascript Exercise Reference",sidebar_label:"Javascript"},sidebar:"sidebardev"},u=[{value:"Data Structures and Manipulation",id:"data-structures-and-manipulation",children:[{value:"Find longest word",id:"find-longest-word",children:[],level:3},{value:"Title case string",id:"title-case-string",children:[],level:3},{value:"Splice Splice Baby",id:"splice-splice-baby",children:[],level:3},{value:"Chunky Monkey",id:"chunky-monkey",children:[],level:3}],level:2}],p={toc:u};function d(e){var r=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Documentation of completed exercises from FCC. Kept as a reference for basics."))),(0,o.kt)("h2",{id:"data-structures-and-manipulation"},"Data Structures and Manipulation"),(0,o.kt)("h3",{id:"find-longest-word"},"Find longest word"),(0,o.kt)("p",null,"Take a string input, calculate the longest word in numerical length, return the result as an integer."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'function findLongestWordLength(str) {\n  let arr = str.split(" "); // split words into array\n  var newarr = []; // declare new array for loop\n  for (var i = 0; i < arr.length; i++) {\n    var result = arr[i].length; // loop through array and send length to results\n    newarr.push(result); // push result into new array for each iteration\n  }\n  console.log("Length of passed words: " + newarr); // debug step\n  return Math.max(...newarr); // use Math.max function to grab highest value in array\n}\n\n// test function\nconsole.log(\n  findLongestWordLength("The quick brown fox jumped over the lazy dog")\n);\n')),(0,o.kt)("h3",{id:"title-case-string"},"Title case string"),(0,o.kt)("p",null,"Take a case insensitive string input, UPPER first letter of every word, return the joined and cased string."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'function titleCase(str) {\n  console.log("input = " + str); // check input\n  let lowercase = str.toLowerCase(); // lowercase all\n  let arr = lowercase.split(" "); // split sentence to array\n  console.log(arr); // check array\n  let outputarr = []; // define output array\n  for (let i = 0; i < arr.length; i++) {\n    // loop through array\n    outputarr.push(arr[i].charAt(0).toUpperCase() + arr[i].slice(1)); // push upper first character + slice the remainder starting from index 1 to output array\n    console.log(outputarr); // debug loop output\n  }\n  let stringerz = outputarr.join(" "); // meme another string to join output back to a sentence\n  return stringerz;\n}\n\n// test function\nconsole.log(titleCase("I\'m a little tea pot"));\n')),(0,o.kt)("h3",{id:"splice-splice-baby"},"Splice Splice Baby"),(0,o.kt)("p",null,"Take three inputs: two arrays and one integer. Insert the first array, into the second array, at the index specified by the integer input."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'function frankenSplice(arr1, arr2, n) {\n  let sliced = arr2.slice(" "); // copy arr2\n  console.log(sliced); // debug\n  sliced.splice(n, 0, ...arr1); // splice from n index, remove 0, insert the *spread* array arr1\n  console.log(sliced); // debug\n  console.log("arr1 = " + arr1); // debug\n  console.log("arr2 = " + arr2); // debug\n  return sliced;\n}\n\n// test function\nfrankenSplice([1, 2, 3], [4, 5, 6], 1);\n')),(0,o.kt)("h3",{id:"chunky-monkey"},"Chunky Monkey"),(0,o.kt)("p",null,"Take an array input, along with an integer. Break the array into chunks defined by the integer input, return multiple arrays."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'function chunkArrayInGroups(arr, size) {\n  let count = arr.length / size; // set count limit for loop\n\n  let pusharr = []; // create blank array for output\n\n  for (var i = 0; i < count; i++) {\n    let newarr = arr.splice(0, size); // create new array with slice()\n    pusharr.push(newarr); // push newarr outside of loop\n  }\n\n  return pusharr;\n}\n\n// test functions\nconsole.log(chunkArrayInGroups(["a", "b", "c", "d"], 2)); // returns [["a", "b"],["c", "d"]]\nconsole.log(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4)); // returns [[0, 1, 2, 3],[4, 5]]\n')))}d.isMDXComponent=!0}}]);